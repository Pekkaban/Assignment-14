<template>
  <div class="game-board">
    <div v-for="(row, rowIndex) in board" :key="rowIndex" class="row">
      <div v-for="(cell, colIndex) in row" :key="colIndex" class="cell" @click="makeMove(rowIndex, colIndex)">
        {{ cell }}
      </div>
    </div>
    <div v-if="winner" class="result">
      <p>Congratulations! Player {{ winner }} wins!</p>
    </div>
    <div v-else-if="isDraw" class="result">
      <p>It's a draw!</p>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      board: [
        ['', '', ''],
        ['', '', ''],
        ['', '', '']
      ],
      currentPlayer: 'X',
      winner: null
    };
  },
  computed: {
    isDraw() {
      return this.board.every(row => row.every(cell => cell !== ''));
    }
  },
  methods: {
    makeMove(row, col) {
      if (!this.board[row][col] && !this.winner) {
        this.$set(this.board[row], col, this.currentPlayer);
        if (this.checkWin()) {
          this.winner = this.currentPlayer;
        } else if (this.isDraw) {
        } else {
          this.currentPlayer = this.currentPlayer === 'X' ? 'O' : 'X';
        }
      }
    },
    checkWin() {
      for (let i = 0; i < 3; i++) {
        if (
          this.board[i][0] &&
          this.board[i][0] === this.board[i][1] &&
          this.board[i][1] === this.board[i][2]
        ) {
          return true; 
        }

        if 
          (this.board[0][i] &&
          this.board[0][i] === this.board[1][i] &&
          this.board[1][i] === this.board[2][i]) 
          {
          return true; 
        }
      }

      if (
        this.board[0][0] &&
        this.board[0][0] === this.board[1][1] &&
        this.board[1][1] === this.board[2][2]
      ) {
        return true; 
      }

      if (
        this.board[0][2] &&
        this.board[0][2] === this.board[1][1] &&
        this.board[1][1] === this.board[2][0]
      ) {
        return true; 

      return false;
    }
  }
}  
};
</script>

<style scoped>
.game-board {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 10px;
}

.row {
  display: flex;
}

.cell {
  flex: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 24px;
  font-weight: bold;
  border: 2px solid #333;
  cursor: pointer;
  transition: background-color 0.3s ease-in-out;
}

.cell:hover {
  background-color: #eee;
}

.result {
  margin-top: 20px;
  font-size: 18px;
  font-weight: bold;
}
</style>
